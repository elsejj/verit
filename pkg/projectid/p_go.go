package projectid

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	"path"

	"github.com/elsejj/verit/pkg/version"
)

/*
GoProject represents a Go project with versioning capabilities
Because Go projects do not have a standard version file, we flow the rules below:
  - lookup the project by checking the existence of "version.txt"
  - this file can be embedded to a go variable use `go:embed` directive
  - the file content should be like `x.y.z`
*/
type GoProject struct {
	workdir string
}

func isGo(workdir string) bool {
	return fileExists(path.Join(workdir, "go.mod"))
}

func (p *GoProject) IsMe(workdir string) bool {
	return isGo(workdir)
}

func (p *GoProject) ID() ProjectID {
	return Go
}

func (p *GoProject) WorkDir() string {
	return p.workdir
}

func (p *GoProject) GetVersion() (*version.Version, error) {
	versionFile := p.versionFile()
	fp, err := os.Open(versionFile)
	if err != nil {
		return nil, err
	}
	defer fp.Close()

	s := bufio.NewScanner(fp)
	sign := []byte("const Version = \"")
	for s.Scan() {
		line := s.Bytes()
		if bytes.HasPrefix(line, sign) {
			ver := line[len(sign):]
			e := bytes.IndexByte(ver, '"')
			if e > 1 {
				return version.Parse(string(ver[:e])), nil
			}
		}
	}
	return nil, fmt.Errorf("version not found")
}

func (p *GoProject) SetVersion(v *version.Version) error {
	p.createVersionDir()
	versionFile := p.versionFile()
	fp, err := os.Create(versionFile)
	if err != nil {
		return err
	}
	defer fp.Close()

	body := `// THIS FILE IS AUTOGENERATED. DO NOT EDIT!
package version

const Version = "` + v.String() + `"
`
	_, err = fp.WriteString(body)
	return err
}

func (p *GoProject) createVersionDir() error {
	baseDir := path.Join(p.workdir, "internal", "version")
	return os.MkdirAll(baseDir, 0755)
}

func (p *GoProject) versionFile() string {
	return path.Join(p.workdir, "internal", "version", "version.go")
}

var _ Project = &GoProject{}
